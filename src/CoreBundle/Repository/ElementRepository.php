<?php

namespace CoreBundle\Repository;

use Doctrine\ORM\EntityRepository;

/**
 * ElementRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class ElementRepository extends EntityRepository
{

    public function findAllElement($idCat, $idTown, $limit)
    {
        $em = $this->getEntityManager();

        if ($idCat != 0 && $idTown != 0) {
            $query = $em->createQuery('
                SELECT e
                FROM CoreBundle:Element e
                JOIN e.utilisateur u
                JOIN e.categorie cat
                JOIN u.town t
                WHERE t.id = :idTown 
                AND cat.id =:idCat
                Order by e.dateCreation DESC
            ')->setParameters(array(
                'idTown' => $idTown,
                'idCat' => $idCat
            ));
        } else if ($idCat == 0 && $idTown != 0) {
            $query = $em->createQuery('
                SELECT e
                FROM CoreBundle:Element e
                JOIN e.utilisateur u
                JOIN e.categorie cat
                JOIN u.town t
                WHERE t.id = :idTown
                Order by e.dateCreation DESC
            ')->setParameters(array(
                'idTown' => $idTown
            ));
        } else if ($idCat != 0 && $idTown == 0) {
            $query = $em->createQuery('
                SELECT e
                FROM CoreBundle:Element e
                JOIN e.utilisateur u
                JOIN e.categorie cat
                JOIN u.town t
                WHERE cat.id =:idCat
                Order by e.dateCreation DESC
            ')->setParameters(array(
                'idCat' => $idCat
            ));
        } else if ($idCat == 0 && $idTown == 0) {
            $query = $em->createQuery('
                SELECT e
                FROM CoreBundle:Element e
                Order by e.dateCreation DESC
            ');
        }

        return $query
            ->setMaxResults($limit)
            ->getResult();
    }

    public function findAllRequest($idTown, $limit)
    {
        $param = "Request";
        $em = $this->getEntityManager();
        $query = $em->createQuery('
            SELECT e
            FROM CoreBundle:Element e
            JOIN e.utilisateur u
            JOIN e.type c
            JOIN u.town t
            WHERE t.id = :idTown 
            AND c.libelle = :param
            Order by e.dateCreation DESC
        ')->setParameters(array(
            'idTown' => $idTown,
            'param' => $param
        ));

        return $query
            ->setMaxResults($limit)
            ->getResult();
    }

    public function findAllOffer($idTown, $limit)
    {
        $param = "Offer";
        $em = $this->getEntityManager();
        $query = $em->createQuery('
            SELECT e
            FROM CoreBundle:Element e
            JOIN e.utilisateur u
            JOIN e.type c
            JOIN u.town t
            WHERE t.id = :idTown 
            AND c.libelle = :param
            Order by e.dateCreation DESC
        ')->setParameters(array(
            'idTown' => $idTown,
            'param' => $param
        ));

        return $query
            ->setMaxResults($limit)
            ->getResult();
    }

    public function findAllElementByUser($idUser, $type, $limit)
    {
        $em = $this->getEntityManager();
        $query = $em->createQuery('
            SELECT e
            FROM CoreBundle:Element e
            JOIN e.utilisateur u
            JOIN e.type t
            WHERE u.id = :idUser 
            AND t.libelle = :type_
            Order by e.dateCreation DESC
        ')->setParameters(array(
            'idUser' => $idUser,
            'type_' => $type
        ));

        return $query
            ->setMaxResults($limit)
            ->getResult();
    }

    public function findRequestsOrOffers($param){
        $em = $this->getEntityManager();
        $query = $em->createQuery('
            SELECT e
            FROM CoreBundle:Element e
            JOIN e.utilisateur u
            JOIN e.type c
            WHERE c.libelle = :param
        ')->setParameters(array(
            'param' => $param
        ));

        return $query
            ->getResult();
    }
}
